import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Map
import org.joda.time.DateTime

rule "Set alarm climate items"
when Item alarm_climate received update
then

	var String temp_string = transform("JSONPATH", "$.[?(@.location=='KJÃ˜KKEN')][0].temperature", alarm_climate.state.toString())
	var String[] temperature = temp_string.split('&')
	postUpdate(alarm_temperature_kitchen, temperature.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')][0].temperature", alarm_climate.state.toString())
	temperature = temp_string.split('&')
	postUpdate(alarm_temperature_hall_gf, temperature.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')][0].temperature", alarm_climate.state.toString())
	temperature = temp_string.split('&')
	postUpdate(alarm_temperature_hall_basement, temperature.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')][0].temperature", alarm_climate.state.toString())
	temperature = temp_string.split('&')
	postUpdate(alarm_temperature_hall_1st, temperature.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')][0].temperature", alarm_climate.state.toString())
	temperature = temp_string.split('&')
	postUpdate(alarm_temperature_laundry, temperature.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='GANG')][0].humidity", alarm_climate.state.toString())
	var String[] humidity = temp_string.split('%')
	postUpdate(alarm_humidity_hall_gf, humidity.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='GANG NEDE')][0].humidity", alarm_climate.state.toString())
	humidity = temp_string.split('%')
	postUpdate(alarm_humidity_hall_basement, humidity.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='Gang oppe')][0].humidity", alarm_climate.state.toString())
	humidity = temp_string.split('%')
	postUpdate(alarm_humidity_hall_1st, humidity.get(0).replace(',', '.'))

	temp_string = transform("JSONPATH", "$.[?(@.location=='vaskerom')][0].humidity", alarm_climate.state.toString())
	humidity = temp_string.split('%')
	postUpdate(alarm_humidity_laundry, humidity.get(0).replace(',', '.'))
end

rule "Arming, disarming alarm"
when Item alarm_alarm changed
then
	if (alarm_alarm.state == "unarmed" || alarm_alarm.state == "armedhome") // HOME 
	{
		var DateTime eveningTime = now.withTime(21, 0, 0, 0)
		var DateTime nightTime = now.withTime(2,0,0,0)
		var DateTime dayTime = now.withTime(5,0,0,0)
		
		if(nightTime.afterNow && dayTime.beforeNow) {
			sendCommand(mode, 0) // HOME
		} else if (nightTime.beforeNow && dayTime.afterNow) {
			sendCommand(mode, 1) // NIGHT
		} else if (nightTime.afterNow || eveningTime.beforeNow) {
			sendCommand(mode, 3) // EVENING 
		} else {
			sendCommand(mode, 0) // HOME
		}
		
	} else if (alarm_alarm.state == "armedaway" || alarm_alarm.state == "armed") // AWAY
		sendCommand(mode, 2) 
	else
		pushover("Ukjent alarmstatus: {}", alarm_alarm.state.toString)
end

// Creates an item that stores the last update time of this item
rule "Records last temperature update time"
when
  Item alarm_temperature_hall_1st received update
then
  postUpdate(alarm_temperature_hall_1st_LastUpdate, new DateTimeType())
end