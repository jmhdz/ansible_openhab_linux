import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.util.Map
import org.joda.time.DateTime

var Timer timerBFWeekdaysOn = null
var Timer timerBFWeekdaysOff = null
var Timer timerBFWeekendOn = null
var Timer timerBFWeekendOff = null

rule "If the room is too cold and we are home, then heat it up, but only if it is less than 10 degrees outside"
	when
		Time cron "0 0/20 * * * ?" 
	then
		var double tempOffice = new Double(OfficeTemperature.state.toString())
		var double tempOutdoor = new Double(OutdoorTemperature.state.toString())
		var double tempBasement = new Double(BasementTemperature.state.toString())
		var double tempLivingroom = new Double(LivingRoomTemperature.state.toString())
		
		if(holiday_mode.state == OFF) {
			if (tempOutdoor <= 10) {
				if (gang_panelovn.state == OFF && mode.state == 0) {
					if (tempOffice < 17) {
						sendCommand(gang_panelovn, ON)
						sendCommand(kontor_panelovn, ON)	
					}
				}
				if (tempBasement < 16 && BasementTemperature.maximumSince(now.minusMinutes(21)).state >= 78) {
					pushover('Kjellertemp er nå: ' + tempBasement + " - den har gått fra " + BasementTemperature.maximumSince(now.minusMinutes(21)).state + " de siste 20 minuttene")
				}
				if (tempLivingroom < (new Double(ac_heat_temp.state.toString()) - 2) && mode.state == 0 && ac_scene.state != 1) {
					sendCommand(ac_scene, 1)
				} else if (tempLivingroom < (new Double(ac_night_temp.state.toString()) -1) && mode.state == 1 && ac_scene.state != 1) {
					sendCommand(ac_scene, 1)
				} else if (tempLivingroom < (new Double(ac_night_temp.state.toString()) -2) && mode.state == 2 && ac_scene.state != 1) {
					sendCommand(ac_scene, 1)
				}
					
			} 
		
			if (tempOutdoor >= 19 && ac_scene.state == 1)
				sendCommand(ac_scene , 0)
			
		} else {
			if (tempBasement < 12 || tempLivingroom < 12 || tempOffice < 12) {
				pushover("En eller annen temperatur er under 12 grader: [Stue: " + tempLivingroom + ", kontor: " + tempOffice + ", kjeller: " + tempBasement + "]")
				if (tempLivingroom < 12)
					sendCommand(ac_scene, 1)
				if (tempOffice < 12) {
					sendCommand(kontor_panelovn, ON)
					//sendCommand(gang_panelovn, ON)	
				}
			}
			if (tempOffice >= 19 && kontor_panelovn.state == ON) {
				sendCommand(kontor_panelovn, OFF)
			}
		}
		
end

rule "When the error code from the AC changes, please let me know"
	when
		Item ac_error changed
	then
	pushover("AC Error changed to: " + ac_error.state.toString())
end

rule "AC scenes"
	when
		Item ac_scene  received command
then
	logInfo('org.openhab', 'AC received state:' + ac_scene.state)
	switch (receivedCommand) {
		case 0: { // OFF
			if (ac_power.state == ON)
				sendCommand(ac_power, OFF)
		}
		case 1: { // HEATING
			var double tempOutdoor = new Double(OutdoorTemperature.state.toString())
			var double lowerTempThreshold = new Double(AC_lower_temp_threshold.state.toString())
			var double additionalDegrees = new Double(AC_additional_degrees.state.toString())
			if (ac_power.state == OFF)
				sendCommand(ac_power, ON)
						
			// Set to heating if not already set
			if (ac_op_mode.state != 4)
				sendCommand(ac_op_mode, 4)
				
			// set direction to fixed
			if (ac_direction.state != 3)
				sendCommand(ac_direction, 3)
			
			// windlevel	
			if (ac_windlevel.state != 0)
				sendCommand(ac_windlevel, 0)

			// correct temperature
			if (mode.state == 0 || mode.state == 3) { //HOME
				if (ac_set_temp.state != ac_heat_temp.state && tempOutdoor > lowerTempThreshold)
					sendCommand(ac_set_temp, ac_heat_temp.state.toString)
				else if (tempOutdoor <= lowerTempThreshold )
					sendCommand(ac_set_temp, (new Double(ac_heat_temp.state.toString) + additionalDegrees).toString())	
			} else if (mode.state == 1) { //NIGHT
				if (ac_night_temp.state != Uninitialized && ac_night_temp.state != ac_heat_temp.state) 
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
				if (tempOutdoor <= lowerTempThreshold)
					sendCommand(ac_set_temp, (new Double(ac_night_temp.state.toString) + additionalDegrees).toString())
			} else { //AWAY
				if (ac_night_temp.state != Uninitialized && ac_night_temp.state != ac_heat_temp.state)
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
					else if (tempOutdoor <= lowerTempThreshold)
					sendCommand(ac_set_temp, (new Double(ac_night_temp.state.toString) + additionalDegrees).toString())
			}
			
			if (tempOutdoor < lowerTempThreshold && mode.state == 0) {
				sendCommand(ac_mode, 5) // TURBO MODE
			} else {
				// Set to Off if tv is off, otherwise to QUIET
				if (tv_power.state == OFF || ac_mode.state != 0)
					sendCommand(ac_mode, 0)
				else if (tv_power.state == ON && ac_mode.state != 1)
					sendCommand(ac_mode, 1) // QUIET
			}
							
		}
		case 2: { // COOLING
			if (ac_power.state == OFF)
				sendCommand(ac_power, ON)
				
			// Set to Off if tv is off, otherwise to QUIET
			if (tv_power.state == OFF && ac_mode.state != 0)
				sendCommand(ac_mode, 0)
			else if (tv_power.state == ON && ac_mode.state != 1)
				sendCommand(ac_mode, 1) // QUIET
			
			// Set to cooling if not already set
			if (ac_op_mode.state != 1)
				sendCommand(ac_op_mode, 1)
				
			// set direction to fixed
			if (ac_direction.state != 3)
				sendCommand(ac_direction, 3)
			
			// windlevel	
			if (ac_windlevel.state != 0)
				sendCommand(ac_windlevel, 0)

			// correct temperature
			if (ac_set_temp.state != ac_cool_temp.state)
				sendCommand(ac_set_temp, ac_cool_temp.state.toString)	
		}
		case 3: { // AIR
			if (ac_power.state == OFF)
				sendCommand(ac_power, ON)
			sendCommand(ac_mode, 5) 
			
			// Set to wind if not already set
			if (ac_op_mode.state != 3)
				sendCommand(ac_op_mode, 3)
				
			// set direction
			if (ac_direction.state != 2)
				sendCommand(ac_direction, 2)
			
			// windlevel	
			if (ac_windlevel.state != 4)
				sendCommand(ac_windlevel, 4)

			// correct temperature
			if (ac_set_temp.state != ac_cool_temp.state)
				sendCommand(ac_set_temp, ac_cool_temp.state.toString)
		}
	}	
end

rule "AC changed from remote"
	when
		Item ac_power changed or
		Item ac_op_mode changed
	then
	if (ac_power.state == OFF) {
		postUpdate(ac_scene, 0) //OFF
	} else if (ac_op_mode.state == 1) {
		postUpdate(ac_scene, 2) // COOL
	} else if (ac_op_mode.state == 4) {
		postUpdate(ac_scene, 1) // HEAT
	} else if (ac_op_mode.state == 3 || ac_op_mode.state == 4){
		postUpdate(ac_scene, 3)
	}
end

rule "Adjust basement floor heating"
	when
	  Item scene_basement_floor_heating received command
	then
	switch(receivedCommand) {
		case 0: { // OFF
			sendCommand(tv_room_basement_floor_power_level, 0)
			sendCommand(laundry_basement_floor_power_level, 0)
			sendCommand(hall_basement_floor_power_level, 0)
			pushover("Basement floor heating switched off")
		}
		case 1: { // NIGHT/LOW
			sendCommand(tv_room_basement_floor_power_level, floor_night_power_level.state.toString)
			sendCommand(laundry_basement_floor_power_level, floor_night_power_level.state.toString)
			sendCommand(hall_basement_floor_power_level, floor_night_power_level.state.toString)
			//pushover("Basement floor heating switched to night mode")
		}
		case 2: { // DAY
			sendCommand(tv_room_basement_floor_power_level, floor_day_power_level.state.toString)
			sendCommand(laundry_basement_floor_power_level, floor_day_power_level.state.toString)
			sendCommand(hall_basement_floor_power_level, floor_day_power_level.state.toString)
			//pushover("Basement floor heating switched to day mode")
		}
		case 3: { //HOLIDAY
			sendCommand(tv_room_basement_floor_power_level, floor_holiday_power_level.state.toString)
			sendCommand(laundry_basement_floor_power_level, floor_holiday_power_level.state.toString)
			sendCommand(hall_basement_floor_power_level, floor_holiday_power_level.state.toString)
			pushover("Basement floor heating switched to holiday mode")
		}
	}
end

rule "Set timer for floor heating"
when
	Time cron "0 0 1 * * ?" or
	Item basementFloorWeekdaysON changed or
	Item basementFloorWeekdaysOFF changed or
	Item basementFloorWeekendON changed or
	Item basementFloorWeekendOFF changed
then
    var int hours = (basementFloorWeekendON.state as DecimalType).intValue()
	var DateTime onTime = now.withTime(hours, 0, 0, 0)
	
	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo("org.openhab.rules", "Scheduling basement floor ON (weekend) for: " + onTime)
	if (timerBFWeekendOn != null) timerBFWeekendOn.cancel()
	timerBFWeekendOn = createTimer(onTime) [|
		// Only do this if not HOLIDAY and only on weekdays
		if (holiday_mode.state == OFF && now.getDayOfWeek > 5) {
			sendCommand(scene_basement_floor_heating, 2) // DAY MODE
		}
	]

    hours = (basementFloorWeekendOFF.state as DecimalType).intValue()
	onTime = now.withTime(hours, 0, 0, 0)
	
	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo("org.openhab.rules", "Scheduling basement floor OFF (weekend) for: " + onTime)
	if (timerBFWeekendOff != null) timerBFWeekendOff.cancel()
	timerBFWeekendOff = createTimer(onTime) [|
		// Only do this if not HOLIDAY and only on weekdays
		if (holiday_mode.state == OFF && now.getDayOfWeek > 5) {
			sendCommand(scene_basement_floor_heating, 1) // NIGHT MODE
		}
	]

	// basement floor weekdays NIGHT MODE
    hours = (basementFloorWeekdaysOFF.state as DecimalType).intValue()
	onTime = now.withTime(hours, 0, 0, 0)
	
	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo("org.openhab.rules", "Scheduling basement floor OFF for: " + onTime)
	if (timerBFWeekdaysOff != null) timerBFWeekdaysOff.cancel()
	timerBFWeekdaysOff = createTimer(onTime) [|
		// Only do this if not HOLIDAY and only on weekdays
		if (holiday_mode.state == OFF && now.getDayOfWeek < 6) {
			sendCommand(scene_basement_floor_heating, 1) // NIGHT MODE
		}
	]

	// basement floor weekdays DAY MODE
    hours = (basementFloorWeekdaysON.state as DecimalType).intValue()
	onTime = now.withTime(hours, 0, 0, 0)
	
	if (onTime.beforeNow) onTime = onTime.plusDays(1)
	logInfo("org.openhab.rules", "Scheduling basement floor ON for: " + onTime)
	if (timerBFWeekdaysOn != null) timerBFWeekdaysOn.cancel()
	timerBFWeekdaysOn = createTimer(onTime) [|
		// Only do this if not HOLIDAY and only on weekdays
		if (holiday_mode.state == OFF && now.getDayOfWeek < 6) {
			sendCommand(scene_basement_floor_heating, 2) // DAY MODE
		}
	]
end

rule "Setting holiday mode" 
when
	Item holiday_mode received command
then
	switch(receivedCommand) {
		case ON: {
			if (scene_basement_floor_heating.state > 0)
				sendCommand(scene_basement_floor_heating, 3)
			if (hall_gf_floor_power_level.state > 0 && hall_gf_floor_power_level.state != floor_holiday_power_level.state)
				sendCommand(hall_gf_floor_power_level, floor_holiday_power_level.state.toString)
			if (bathroom_gf_floor_power_level.state > 0 && bathroom_gf_floor_power_level.state != floor_holiday_power_level.state)
				sendCommand(bathroom_gf_floor_power_level, floor_holiday_power_level.state.toString)
			if (ac_scene.state == 1) {
				if (ac_night_temp.state != Uninitialized && ac_night_temp.state != ac_set_temp.state) 
					sendCommand(ac_set_temp, ac_night_temp.state.toString)
			} else if(ac_scene.state != 0) { // switch of air conditioner if not heating
				sendCommand(ac_scene, 0)
			}
			if (bathroom_1st_floor_mode.state != 0)
				sendCommand(bathroom_1st_floor_mode, 11) //ECO MODE
			
			sendCommand(screen_pi_screen, OFF)
			sendCommand(screen_pi, OFF)
			sendCommand(roombaDock, OFF)
		}
		case OFF: {
			if (scene_basement_floor_heating.state > 0)
				sendCommand(scene_basement_floor_heating, 2)
			if (hall_gf_floor_power_level.state > 0 && hall_gf_floor_power_level.state != floor_day_power_level.state)	
				sendCommand(hall_gf_floor_power_level, floor_day_power_level.state.toString)
			if (bathroom_gf_floor_power_level.state > 0 && bathroom_gf_floor_power_level.state != floor_day_power_level.state)
				sendCommand(bathroom_gf_floor_power_level, floor_day_power_level.state.toString)
			if (bathroom_1st_floor_mode.state == 11)
				sendCommand(bathroom_1st_floor_mode, 1) //HEATING MODE
			if (ac_scene.state == 1) {
				if (ac_heat_temp.state != Uninitialized && ac_heat_temp.state != ac_set_temp.state) 
					sendCommand(ac_set_temp, ac_heat_temp.state.toString)
			}
			if (screen_pi.state == ON) 
				sendCommand(screen_pi_screen, ON)
			else 
				pushover('ScreenPi is switched off...')	
			sendCommand(roombaDock, ON)			
		}
	}
end	

rule "Make sure the z-wave-api has the configuration values"
	when
		Time cron "0 0/40 * * * ?" 
	then
	var String htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B23%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B24%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B25%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B26%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B27%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
	htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B28%5D.Configuration.Get(12)"
	sendHttpGetRequest(htp)
end
	
rule "Changing floor mode on 1st floor bathroom"
when
	Item bathroom_1st_floor_mode received command
then
	var String htp = "http://{{zwave_ip}}:8083/ZWaveAPI/Run/devices%5B24%5D.ThermostatMode.Set("+ receivedCommand.toString + ")"
	logInfo("FloorHeating", "Sending request to set thermostat to : " + receivedCommand.toString + " , like this: [" + htp + "]")
	sendHttpGetRequest(htp)
end 

	
